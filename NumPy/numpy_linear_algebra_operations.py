# -*- coding: utf-8 -*-
"""numpy_linear_algebra_operations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_trPRKLy3I2YOTMfLIg1qiElk1G6EgaD
"""

'''
Matrix multiplication (np.dot() or @)
Transpose (.T)
Determinant (np.linalg.det())
Inverse (np.linalg.inv())
Eigenvalues and Eigenvectors (np.linalg.eig())
Solving linear systems (np.linalg.solve())
Matrix rank (np.linalg.matrix_rank())
Singular Value Decomposition (SVD) (np.linalg.svd())
Condition Number (np.linalg.cond())
Cholesky Decomposition (np.linalg.cholesky())
QR Decomposition (np.linalg.qr())
Matrix Power (np.linalg.matrix_power())import numpy as np
'''

# Define matrices for operations
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
b = np.array([5, 11])

# 1. Matrix Multiplication (Dot Product)
result_dot = np.dot(A, B)
print("Matrix Multiplication (A . B):\n", result_dot)

# 2. Matrix Transpose
matrix_transpose = A.T
print("\nTranspose of Matrix A:\n", matrix_transpose)

# 3. Matrix Determinant
det_A = np.linalg.det(A)
print("\nDeterminant of Matrix A:", det_A)

# 4. Matrix Inversion
if det_A != 0:
    A_inv = np.linalg.inv(A)
    print("\nInverse of Matrix A:\n", A_inv)
else:
    print("\nMatrix A is singular, it cannot be inverted.")

# 5. Eigenvalues and Eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(A)
print("\nEigenvalues of Matrix A:", eigenvalues)
print("Eigenvectors of Matrix A:\n", eigenvectors)

# 6. Solving Linear Systems (Ax = b)
x = np.linalg.solve(A, b)
print("\nSolution to the system Ax = b:", x)

# 7. Matrix Rank
rank_A = np.linalg.matrix_rank(A)
print("\nRank of Matrix A:", rank_A)

# 8. Singular Value Decomposition (SVD)
U, S, Vt = np.linalg.svd(A)
print("\nSVD of Matrix A:")
print("U (left singular vectors):\n", U)
print("S (singular values):\n", S)
print("Vt (right singular vectors):\n", Vt)

# 9. Condition Number
condition_number = np.linalg.cond(A)
print("\nCondition Number of Matrix A:", condition_number)

# 10. Cholesky Decomposition (using a positive-definite matrix)
A_chol = np.array([[6, 3], [3, 6]])  # Positive-definite matrix
L = np.linalg.cholesky(A_chol)
print("\nCholesky Decomposition of A:\n", L)

# 11. QR Decomposition
Q, R = np.linalg.qr(A)
print("\nQR Decomposition of Matrix A:")
print("Q (Orthogonal Matrix):\n", Q)
print("R (Upper Triangular Matrix):\n", R)

# 12. Matrix Power
A_power = np.linalg.matrix_power(A, 2)  # A^2
print("\nMatrix A raised to power 2:\n", A_power)

# 13. Trace of a Matrix
trace_A = np.trace(A)
print("\nTrace of Matrix A:", trace_A)

